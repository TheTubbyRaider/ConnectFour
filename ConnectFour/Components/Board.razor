@using System.Drawing
@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">ðŸ”½</span>
    }
</nav>

<article>
    @winnerMessage 
    <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>

    <!-- Display consecutive wins -->
    <div>
        <p>Player 1 Consecutive Wins: @Player1ConsecutiveWins</p>
        <p>Player 2 Consecutive Wins: @Player2ConsecutiveWins</p>
    </div>
</article>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
    </div>

    @for (var i = 0; i < 42; i++)
    {
        <span class="@pieces[i]"></span>
    }
</div>

@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    // Track consecutive wins for each player
    private int Player1ConsecutiveWins { get; set; } = 0;
    private int Player2ConsecutiveWins { get; set; } = 0;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

    private void PlayPiece(byte col)
    {
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);

            pieces[turn] = $"player{player} col{col} drop{landingRow}";

            // Check if there's a winner
            winnerMessage = State.CheckForWin() switch
            {
                GameState.WinState.Player1_Wins => "Player 1 Wins!",
                GameState.WinState.Player2_Wins => "Player 2 Wins!",
                GameState.WinState.Tie => "It's a tie!",
                _ => ""
            };

            if (winnerMessage == "Player 1 Wins!")
            {
                Player1ConsecutiveWins++; // Increment Player 1's win streak
            }
            else if (winnerMessage == "Player 2 Wins!")
            {
                Player2ConsecutiveWins++; // Increment Player 2's win streak
            }

            errorMessage = string.Empty; // Clear error message on successful move
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message; // Display the error message if any
        }
    }

    private void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42]; // Reset the pieces array
    }
}
